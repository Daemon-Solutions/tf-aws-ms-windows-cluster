netsh advfirewall set allprofiles state off


$cluster_cidr="${cluster_cidr}"
$vpc_cidr="${vpc_cidr}"

$cluster_octet=((($cluster_cidr).Split("/"))[0]).split(".")
$cluster_gw=$cluster_octet[0]+"."+$cluster_octet[1]+"."+$cluster_octet[2]+"."+"1"

$primary_ip_octet=((Get-NetIPAddress | ? {$_.InterfaceAlias -eq "Ethernet" -and $_.AddressFamily -eq "IPv4"}).IPAddress).split(".")
$primary_gw=$primary_ip_octet[0]+"."+$primary_ip_octet[1]+"."+$primary_ip_octet[2]+"."+"1"
$vpc_network=(($vpc_cidr).split("/"))[0]


route add $cluster_network MASK 255.255.255.240 $cluster_gw

route add $vpc_network MASK 255.255.0.0 $primary_gw

route change 0.0.0.0 mask 0.0.0.0 $primary_gw metric 5

Install-WindowsFeature failover-clustering -IncludeManagementTools




$non_boot_disks=(get-disk | Where-Object {$_.Number -ne 0}).Number
$non_boot_partitions=(Get-Partition -DiskNumber $non_boot_disks -ErrorAction SilentlyContinue | where-object {$_.DriveLetter -ne "z"}).DriveLetter

foreach($non_boot_partition in $non_boot_partitions){

$drive_root=$non_boot_partition+":\"

if((gci $drive_root -force | Where-Object {$_.name -ne '$RECYCLE.BIN'}).count -eq 0){

Remove-Partition -DriveLetter $non_boot_partition -confirm:$false
}
}

$drives="${drives}"
$names="${names}"

New-Item c:\drives.txt -type file  -force -value $drives
New-Item c:\names.txt -type file  -force -value $names


cls

$letters=(Get-Content -Path C:\drives.txt) -split ','

$labels=(Get-Content -Path C:\names.txt) -split ','

for($i=1; $i -le $labels.count; $i++){

$drive_letter=$letters[$i-1] + ":"

  if ((test-path "$drive_letter") -eq $false)

{

Initialize-Disk -PartitionStyle MBR -PassThru -Number $i

New-Partition  -DriveLetter $letters[$i-1] -UseMaximumSize -DiskNumber $i

Format-Volume -FileSystem NTFS -NewFileSystemLabel $labels[$i-1] -Confirm:$false -DriveLetter $letters[$i-1]


}
}





function ConnectToDomain() {
	$domain = (Get-WmiObject -Class Win32_ComputerSystem).Domain
	$newDomain = "${domain_name}"
	$ad_user = "${ad_user}"
	$newDomainPassword = '${domain_password}' # single quotes because password can contain dollar sign
	if ( ([string]::Compare($newDomain, $domain, $True) -ne 0) ) {
	  $connect = (Get-WmiObject -Class Win32_ComputerSystem).JoinDomainOrWorkGroup($newDomain,$newDomainPassword,"$ad_user@$newDomain",$null,3).ReturnValue
	  if ($connect -eq 0 ) {
			Restart-Computer
			Start-Sleep -s 30
	  }
	}
}

net user administrator ${local_password}

$newName = "${hostname}"
if ( ([string]::Compare($newName, $env:computerName, $True) -ne 0) ) {
	$rename = (Get-WmiObject -Class Win32_ComputerSystem).Rename($newName,"${local_password}",'Administrator').ReturnValue
  if ($rename -eq 0) {
    Restart-Computer
    Start-Sleep -s 30
  }

	} else {

	Set-DefaultAWSRegion -Region "${region}"
  start-sleep -s 30
	Import-Module NetAdapter
	$alias = (Get-NetAdapter).Name
	Set-DnsClientServerAddress -InterfaceAlias $alias -ServerAddress "${dns_servers}"
	ConnectToDomain
}
